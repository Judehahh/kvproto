// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `resource_manager.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct ListResourceGroupsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListResourceGroupsRequest {
    fn default() -> &'a ListResourceGroupsRequest {
        <ListResourceGroupsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListResourceGroupsRequest {
    pub fn new() -> ListResourceGroupsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ListResourceGroupsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListResourceGroupsRequest {
        ListResourceGroupsRequest::new()
    }

    fn default_instance() -> &'static ListResourceGroupsRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListResourceGroupsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListResourceGroupsRequest,
        };
        unsafe {
            instance.get(ListResourceGroupsRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListResourceGroupsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for ListResourceGroupsRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
    }
}
impl ::std::fmt::Debug for ListResourceGroupsRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        Ok(())
    }
}

impl ::protobuf::reflect::ProtobufValue for ListResourceGroupsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListResourceGroupsResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    pub groups: ::protobuf::RepeatedField<ResourceGroup>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListResourceGroupsResponse {
    fn default() -> &'a ListResourceGroupsResponse {
        <ListResourceGroupsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListResourceGroupsResponse {
    pub fn new() -> ListResourceGroupsResponse {
        ::std::default::Default::default()
    }

    // .resource_manager.Error error = 1;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    // repeated .resource_manager.ResourceGroup groups = 2;


    pub fn get_groups(&self) -> &[ResourceGroup] {
        &self.groups
    }
    pub fn clear_groups(&mut self) {
        self.groups.clear();
    }

    // Param is passed by value, moved
    pub fn set_groups(&mut self, v: ::protobuf::RepeatedField<ResourceGroup>) {
        self.groups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_groups(&mut self) -> &mut ::protobuf::RepeatedField<ResourceGroup> {
        &mut self.groups
    }

    // Take field
    pub fn take_groups(&mut self) -> ::protobuf::RepeatedField<ResourceGroup> {
        ::std::mem::replace(&mut self.groups, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListResourceGroupsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.groups {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.groups)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.groups {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.groups {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListResourceGroupsResponse {
        ListResourceGroupsResponse::new()
    }

    fn default_instance() -> &'static ListResourceGroupsResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListResourceGroupsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListResourceGroupsResponse,
        };
        unsafe {
            instance.get(ListResourceGroupsResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListResourceGroupsResponse {
    fn clear(&mut self) {
        self.error.clear();
        self.groups.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for ListResourceGroupsResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        ::protobuf::PbPrint::fmt(&self.groups, "groups", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for ListResourceGroupsResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        ::protobuf::PbPrint::fmt(&self.groups, "groups", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListResourceGroupsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetResourceGroupRequest {
    // message fields
    pub resource_group_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetResourceGroupRequest {
    fn default() -> &'a GetResourceGroupRequest {
        <GetResourceGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetResourceGroupRequest {
    pub fn new() -> GetResourceGroupRequest {
        ::std::default::Default::default()
    }

    // string resource_group_name = 1;


    pub fn get_resource_group_name(&self) -> &str {
        &self.resource_group_name
    }
    pub fn clear_resource_group_name(&mut self) {
        self.resource_group_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_group_name(&mut self, v: ::std::string::String) {
        self.resource_group_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_group_name(&mut self) -> &mut ::std::string::String {
        &mut self.resource_group_name
    }

    // Take field
    pub fn take_resource_group_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_group_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetResourceGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_group_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource_group_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_group_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.resource_group_name.is_empty() {
            os.write_string(1, &self.resource_group_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetResourceGroupRequest {
        GetResourceGroupRequest::new()
    }

    fn default_instance() -> &'static GetResourceGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetResourceGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetResourceGroupRequest,
        };
        unsafe {
            instance.get(GetResourceGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetResourceGroupRequest {
    fn clear(&mut self) {
        self.resource_group_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for GetResourceGroupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.resource_group_name, "resource_group_name", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for GetResourceGroupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.resource_group_name, "resource_group_name", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResourceGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetResourceGroupResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    pub group: ::protobuf::SingularPtrField<ResourceGroup>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetResourceGroupResponse {
    fn default() -> &'a GetResourceGroupResponse {
        <GetResourceGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetResourceGroupResponse {
    pub fn new() -> GetResourceGroupResponse {
        ::std::default::Default::default()
    }

    // .resource_manager.Error error = 1;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    // .resource_manager.ResourceGroup group = 2;


    pub fn get_group(&self) -> &ResourceGroup {
        self.group.as_ref().unwrap_or_else(|| ResourceGroup::default_instance())
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    pub fn has_group(&self) -> bool {
        self.group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ResourceGroup) {
        self.group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ResourceGroup {
        if self.group.is_none() {
            self.group.set_default();
        }
        self.group.as_mut().unwrap()
    }

    // Take field
    pub fn take_group(&mut self) -> ResourceGroup {
        self.group.take().unwrap_or_else(|| ResourceGroup::new())
    }
}

impl ::protobuf::Message for GetResourceGroupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.group {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.group)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.group.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetResourceGroupResponse {
        GetResourceGroupResponse::new()
    }

    fn default_instance() -> &'static GetResourceGroupResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetResourceGroupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetResourceGroupResponse,
        };
        unsafe {
            instance.get(GetResourceGroupResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetResourceGroupResponse {
    fn clear(&mut self) {
        self.error.clear();
        self.group.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for GetResourceGroupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        ::protobuf::PbPrint::fmt(&self.group, "group", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for GetResourceGroupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        ::protobuf::PbPrint::fmt(&self.group, "group", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResourceGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResourceGroupRequest {
    // message fields
    pub resource_group_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResourceGroupRequest {
    fn default() -> &'a DeleteResourceGroupRequest {
        <DeleteResourceGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResourceGroupRequest {
    pub fn new() -> DeleteResourceGroupRequest {
        ::std::default::Default::default()
    }

    // string resource_group_name = 1;


    pub fn get_resource_group_name(&self) -> &str {
        &self.resource_group_name
    }
    pub fn clear_resource_group_name(&mut self) {
        self.resource_group_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_group_name(&mut self, v: ::std::string::String) {
        self.resource_group_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_group_name(&mut self) -> &mut ::std::string::String {
        &mut self.resource_group_name
    }

    // Take field
    pub fn take_resource_group_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_group_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteResourceGroupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_group_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource_group_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_group_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.resource_group_name.is_empty() {
            os.write_string(1, &self.resource_group_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResourceGroupRequest {
        DeleteResourceGroupRequest::new()
    }

    fn default_instance() -> &'static DeleteResourceGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<DeleteResourceGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteResourceGroupRequest,
        };
        unsafe {
            instance.get(DeleteResourceGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for DeleteResourceGroupRequest {
    fn clear(&mut self) {
        self.resource_group_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for DeleteResourceGroupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.resource_group_name, "resource_group_name", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DeleteResourceGroupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.resource_group_name, "resource_group_name", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResourceGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResourceGroupResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    pub body: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResourceGroupResponse {
    fn default() -> &'a DeleteResourceGroupResponse {
        <DeleteResourceGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResourceGroupResponse {
    pub fn new() -> DeleteResourceGroupResponse {
        ::std::default::Default::default()
    }

    // .resource_manager.Error error = 1;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    // string body = 2;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteResourceGroupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.body.is_empty() {
            os.write_string(2, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResourceGroupResponse {
        DeleteResourceGroupResponse::new()
    }

    fn default_instance() -> &'static DeleteResourceGroupResponse {
        static mut instance: ::protobuf::lazy::Lazy<DeleteResourceGroupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DeleteResourceGroupResponse,
        };
        unsafe {
            instance.get(DeleteResourceGroupResponse::new)
        }
    }
}

impl ::protobuf::Clear for DeleteResourceGroupResponse {
    fn clear(&mut self) {
        self.error.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for DeleteResourceGroupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        ::protobuf::PbPrint::fmt(&self.body, "body", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for DeleteResourceGroupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        ::protobuf::PbPrint::fmt(&self.body, "body", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResourceGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PutResourceGroupRequest {
    // message fields
    pub group: ::protobuf::SingularPtrField<ResourceGroup>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PutResourceGroupRequest {
    fn default() -> &'a PutResourceGroupRequest {
        <PutResourceGroupRequest as ::protobuf::Message>::default_instance()
    }
}

impl PutResourceGroupRequest {
    pub fn new() -> PutResourceGroupRequest {
        ::std::default::Default::default()
    }

    // .resource_manager.ResourceGroup group = 1;


    pub fn get_group(&self) -> &ResourceGroup {
        self.group.as_ref().unwrap_or_else(|| ResourceGroup::default_instance())
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    pub fn has_group(&self) -> bool {
        self.group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ResourceGroup) {
        self.group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ResourceGroup {
        if self.group.is_none() {
            self.group.set_default();
        }
        self.group.as_mut().unwrap()
    }

    // Take field
    pub fn take_group(&mut self) -> ResourceGroup {
        self.group.take().unwrap_or_else(|| ResourceGroup::new())
    }
}

impl ::protobuf::Message for PutResourceGroupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.group {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.group)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.group.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutResourceGroupRequest {
        PutResourceGroupRequest::new()
    }

    fn default_instance() -> &'static PutResourceGroupRequest {
        static mut instance: ::protobuf::lazy::Lazy<PutResourceGroupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PutResourceGroupRequest,
        };
        unsafe {
            instance.get(PutResourceGroupRequest::new)
        }
    }
}

impl ::protobuf::Clear for PutResourceGroupRequest {
    fn clear(&mut self) {
        self.group.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for PutResourceGroupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.group, "group", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for PutResourceGroupRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.group, "group", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutResourceGroupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PutResourceGroupResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    pub body: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PutResourceGroupResponse {
    fn default() -> &'a PutResourceGroupResponse {
        <PutResourceGroupResponse as ::protobuf::Message>::default_instance()
    }
}

impl PutResourceGroupResponse {
    pub fn new() -> PutResourceGroupResponse {
        ::std::default::Default::default()
    }

    // .resource_manager.Error error = 1;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    // string body = 2;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PutResourceGroupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.body.is_empty() {
            os.write_string(2, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutResourceGroupResponse {
        PutResourceGroupResponse::new()
    }

    fn default_instance() -> &'static PutResourceGroupResponse {
        static mut instance: ::protobuf::lazy::Lazy<PutResourceGroupResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PutResourceGroupResponse,
        };
        unsafe {
            instance.get(PutResourceGroupResponse::new)
        }
    }
}

impl ::protobuf::Clear for PutResourceGroupResponse {
    fn clear(&mut self) {
        self.error.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for PutResourceGroupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        ::protobuf::PbPrint::fmt(&self.body, "body", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for PutResourceGroupResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        ::protobuf::PbPrint::fmt(&self.body, "body", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutResourceGroupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenBucketsRequest {
    // message fields
    pub requests: ::protobuf::RepeatedField<TokenBucketRequest>,
    pub target_request_period_ms: u64,
    pub client_unique_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenBucketsRequest {
    fn default() -> &'a TokenBucketsRequest {
        <TokenBucketsRequest as ::protobuf::Message>::default_instance()
    }
}

impl TokenBucketsRequest {
    pub fn new() -> TokenBucketsRequest {
        ::std::default::Default::default()
    }

    // repeated .resource_manager.TokenBucketRequest requests = 1;


    pub fn get_requests(&self) -> &[TokenBucketRequest] {
        &self.requests
    }
    pub fn clear_requests(&mut self) {
        self.requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_requests(&mut self, v: ::protobuf::RepeatedField<TokenBucketRequest>) {
        self.requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requests(&mut self) -> &mut ::protobuf::RepeatedField<TokenBucketRequest> {
        &mut self.requests
    }

    // Take field
    pub fn take_requests(&mut self) -> ::protobuf::RepeatedField<TokenBucketRequest> {
        ::std::mem::replace(&mut self.requests, ::protobuf::RepeatedField::new())
    }

    // uint64 target_request_period_ms = 2;


    pub fn get_target_request_period_ms(&self) -> u64 {
        self.target_request_period_ms
    }
    pub fn clear_target_request_period_ms(&mut self) {
        self.target_request_period_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_request_period_ms(&mut self, v: u64) {
        self.target_request_period_ms = v;
    }

    // uint64 client_unique_id = 3;


    pub fn get_client_unique_id(&self) -> u64 {
        self.client_unique_id
    }
    pub fn clear_client_unique_id(&mut self) {
        self.client_unique_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_unique_id(&mut self, v: u64) {
        self.client_unique_id = v;
    }
}

impl ::protobuf::Message for TokenBucketsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.requests {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.requests)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.target_request_period_ms = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_unique_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.target_request_period_ms != 0 {
            my_size += ::protobuf::rt::value_size(2, self.target_request_period_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.client_unique_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.client_unique_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.requests {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.target_request_period_ms != 0 {
            os.write_uint64(2, self.target_request_period_ms)?;
        }
        if self.client_unique_id != 0 {
            os.write_uint64(3, self.client_unique_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenBucketsRequest {
        TokenBucketsRequest::new()
    }

    fn default_instance() -> &'static TokenBucketsRequest {
        static mut instance: ::protobuf::lazy::Lazy<TokenBucketsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenBucketsRequest,
        };
        unsafe {
            instance.get(TokenBucketsRequest::new)
        }
    }
}

impl ::protobuf::Clear for TokenBucketsRequest {
    fn clear(&mut self) {
        self.requests.clear();
        self.target_request_period_ms = 0;
        self.client_unique_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TokenBucketsRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.requests, "requests", buf);
        ::protobuf::PbPrint::fmt(&self.target_request_period_ms, "target_request_period_ms", buf);
        ::protobuf::PbPrint::fmt(&self.client_unique_id, "client_unique_id", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TokenBucketsRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.requests, "requests", &mut s);
        ::protobuf::PbPrint::fmt(&self.target_request_period_ms, "target_request_period_ms", &mut s);
        ::protobuf::PbPrint::fmt(&self.client_unique_id, "client_unique_id", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenBucketsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenBucketRequest {
    // message fields
    pub resource_group_name: ::std::string::String,
    pub consumption_since_last_request: ::protobuf::SingularPtrField<Consumption>,
    // message oneof groups
    pub request: ::std::option::Option<TokenBucketRequest_oneof_request>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenBucketRequest {
    fn default() -> &'a TokenBucketRequest {
        <TokenBucketRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq)]
pub enum TokenBucketRequest_oneof_request {
    RuItems(TokenBucketRequestRequestRu),
    RawResourceItems(TokenBucketRequestRequestRawResource),
}

impl ::protobuf::PbPrint for TokenBucketRequest_oneof_request {
    fn fmt(&self, name: &str, buf: &mut String) {
        match self {
            TokenBucketRequest_oneof_request::RuItems(v) => ::protobuf::PbPrint::fmt(v, name, buf),
            TokenBucketRequest_oneof_request::RawResourceItems(v) => ::protobuf::PbPrint::fmt(v, name, buf),
        }
    }
}

impl TokenBucketRequest {
    pub fn new() -> TokenBucketRequest {
        ::std::default::Default::default()
    }

    // string resource_group_name = 1;


    pub fn get_resource_group_name(&self) -> &str {
        &self.resource_group_name
    }
    pub fn clear_resource_group_name(&mut self) {
        self.resource_group_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_group_name(&mut self, v: ::std::string::String) {
        self.resource_group_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_group_name(&mut self) -> &mut ::std::string::String {
        &mut self.resource_group_name
    }

    // Take field
    pub fn take_resource_group_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_group_name, ::std::string::String::new())
    }

    // .resource_manager.TokenBucketRequest.RequestRU ru_items = 2;


    pub fn get_ru_items(&self) -> &TokenBucketRequestRequestRu {
        match self.request {
            ::std::option::Option::Some(TokenBucketRequest_oneof_request::RuItems(ref v)) => v,
            _ => TokenBucketRequestRequestRu::default_instance(),
        }
    }
    pub fn clear_ru_items(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_ru_items(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(TokenBucketRequest_oneof_request::RuItems(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ru_items(&mut self, v: TokenBucketRequestRequestRu) {
        self.request = ::std::option::Option::Some(TokenBucketRequest_oneof_request::RuItems(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ru_items(&mut self) -> &mut TokenBucketRequestRequestRu {
        if let ::std::option::Option::Some(TokenBucketRequest_oneof_request::RuItems(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(TokenBucketRequest_oneof_request::RuItems(TokenBucketRequestRequestRu::new()));
        }
        match self.request {
            ::std::option::Option::Some(TokenBucketRequest_oneof_request::RuItems(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ru_items(&mut self) -> TokenBucketRequestRequestRu {
        if self.has_ru_items() {
            match self.request.take() {
                ::std::option::Option::Some(TokenBucketRequest_oneof_request::RuItems(v)) => v,
                _ => panic!(),
            }
        } else {
            TokenBucketRequestRequestRu::new()
        }
    }

    // .resource_manager.TokenBucketRequest.RequestRawResource raw_resource_items = 3;


    pub fn get_raw_resource_items(&self) -> &TokenBucketRequestRequestRawResource {
        match self.request {
            ::std::option::Option::Some(TokenBucketRequest_oneof_request::RawResourceItems(ref v)) => v,
            _ => TokenBucketRequestRequestRawResource::default_instance(),
        }
    }
    pub fn clear_raw_resource_items(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_raw_resource_items(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(TokenBucketRequest_oneof_request::RawResourceItems(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw_resource_items(&mut self, v: TokenBucketRequestRequestRawResource) {
        self.request = ::std::option::Option::Some(TokenBucketRequest_oneof_request::RawResourceItems(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw_resource_items(&mut self) -> &mut TokenBucketRequestRequestRawResource {
        if let ::std::option::Option::Some(TokenBucketRequest_oneof_request::RawResourceItems(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(TokenBucketRequest_oneof_request::RawResourceItems(TokenBucketRequestRequestRawResource::new()));
        }
        match self.request {
            ::std::option::Option::Some(TokenBucketRequest_oneof_request::RawResourceItems(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw_resource_items(&mut self) -> TokenBucketRequestRequestRawResource {
        if self.has_raw_resource_items() {
            match self.request.take() {
                ::std::option::Option::Some(TokenBucketRequest_oneof_request::RawResourceItems(v)) => v,
                _ => panic!(),
            }
        } else {
            TokenBucketRequestRequestRawResource::new()
        }
    }

    // .resource_manager.Consumption consumption_since_last_request = 4;


    pub fn get_consumption_since_last_request(&self) -> &Consumption {
        self.consumption_since_last_request.as_ref().unwrap_or_else(|| Consumption::default_instance())
    }
    pub fn clear_consumption_since_last_request(&mut self) {
        self.consumption_since_last_request.clear();
    }

    pub fn has_consumption_since_last_request(&self) -> bool {
        self.consumption_since_last_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consumption_since_last_request(&mut self, v: Consumption) {
        self.consumption_since_last_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consumption_since_last_request(&mut self) -> &mut Consumption {
        if self.consumption_since_last_request.is_none() {
            self.consumption_since_last_request.set_default();
        }
        self.consumption_since_last_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_consumption_since_last_request(&mut self) -> Consumption {
        self.consumption_since_last_request.take().unwrap_or_else(|| Consumption::new())
    }
}

impl ::protobuf::Message for TokenBucketRequest {
    fn is_initialized(&self) -> bool {
        if let Some(TokenBucketRequest_oneof_request::RuItems(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TokenBucketRequest_oneof_request::RawResourceItems(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.consumption_since_last_request {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_group_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(TokenBucketRequest_oneof_request::RuItems(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(TokenBucketRequest_oneof_request::RawResourceItems(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consumption_since_last_request)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource_group_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_group_name);
        }
        if let Some(ref v) = self.consumption_since_last_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &TokenBucketRequest_oneof_request::RuItems(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TokenBucketRequest_oneof_request::RawResourceItems(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.resource_group_name.is_empty() {
            os.write_string(1, &self.resource_group_name)?;
        }
        if let Some(ref v) = self.consumption_since_last_request.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &TokenBucketRequest_oneof_request::RuItems(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TokenBucketRequest_oneof_request::RawResourceItems(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenBucketRequest {
        TokenBucketRequest::new()
    }

    fn default_instance() -> &'static TokenBucketRequest {
        static mut instance: ::protobuf::lazy::Lazy<TokenBucketRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenBucketRequest,
        };
        unsafe {
            instance.get(TokenBucketRequest::new)
        }
    }
}

impl ::protobuf::Clear for TokenBucketRequest {
    fn clear(&mut self) {
        self.resource_group_name.clear();
        self.request = ::std::option::Option::None;
        self.request = ::std::option::Option::None;
        self.consumption_since_last_request.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TokenBucketRequest {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.resource_group_name, "resource_group_name", buf);
        ::protobuf::PbPrint::fmt(&self.consumption_since_last_request, "consumption_since_last_request", buf);
        ::protobuf::PbPrint::fmt(&self.request, "request", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TokenBucketRequest {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.resource_group_name, "resource_group_name", &mut s);
        ::protobuf::PbPrint::fmt(&self.consumption_since_last_request, "consumption_since_last_request", &mut s);
        ::protobuf::PbPrint::fmt(&self.request, "request", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenBucketRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenBucketRequestRequestRu {
    // message fields
    pub request_r_u: ::protobuf::RepeatedField<RequestUnitItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenBucketRequestRequestRu {
    fn default() -> &'a TokenBucketRequestRequestRu {
        <TokenBucketRequestRequestRu as ::protobuf::Message>::default_instance()
    }
}

impl TokenBucketRequestRequestRu {
    pub fn new() -> TokenBucketRequestRequestRu {
        ::std::default::Default::default()
    }

    // repeated .resource_manager.RequestUnitItem request_r_u = 1;


    pub fn get_request_r_u(&self) -> &[RequestUnitItem] {
        &self.request_r_u
    }
    pub fn clear_request_r_u(&mut self) {
        self.request_r_u.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_r_u(&mut self, v: ::protobuf::RepeatedField<RequestUnitItem>) {
        self.request_r_u = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_r_u(&mut self) -> &mut ::protobuf::RepeatedField<RequestUnitItem> {
        &mut self.request_r_u
    }

    // Take field
    pub fn take_request_r_u(&mut self) -> ::protobuf::RepeatedField<RequestUnitItem> {
        ::std::mem::replace(&mut self.request_r_u, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TokenBucketRequestRequestRu {
    fn is_initialized(&self) -> bool {
        for v in &self.request_r_u {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.request_r_u)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.request_r_u {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.request_r_u {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenBucketRequestRequestRu {
        TokenBucketRequestRequestRu::new()
    }

    fn default_instance() -> &'static TokenBucketRequestRequestRu {
        static mut instance: ::protobuf::lazy::Lazy<TokenBucketRequestRequestRu> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenBucketRequestRequestRu,
        };
        unsafe {
            instance.get(TokenBucketRequestRequestRu::new)
        }
    }
}

impl ::protobuf::Clear for TokenBucketRequestRequestRu {
    fn clear(&mut self) {
        self.request_r_u.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TokenBucketRequestRequestRu {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.request_r_u, "request_r_u", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TokenBucketRequestRequestRu {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.request_r_u, "request_r_u", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenBucketRequestRequestRu {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenBucketRequestRequestRawResource {
    // message fields
    pub request_raw_resource: ::protobuf::RepeatedField<RawResourceItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenBucketRequestRequestRawResource {
    fn default() -> &'a TokenBucketRequestRequestRawResource {
        <TokenBucketRequestRequestRawResource as ::protobuf::Message>::default_instance()
    }
}

impl TokenBucketRequestRequestRawResource {
    pub fn new() -> TokenBucketRequestRequestRawResource {
        ::std::default::Default::default()
    }

    // repeated .resource_manager.RawResourceItem request_raw_resource = 1;


    pub fn get_request_raw_resource(&self) -> &[RawResourceItem] {
        &self.request_raw_resource
    }
    pub fn clear_request_raw_resource(&mut self) {
        self.request_raw_resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_raw_resource(&mut self, v: ::protobuf::RepeatedField<RawResourceItem>) {
        self.request_raw_resource = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_raw_resource(&mut self) -> &mut ::protobuf::RepeatedField<RawResourceItem> {
        &mut self.request_raw_resource
    }

    // Take field
    pub fn take_request_raw_resource(&mut self) -> ::protobuf::RepeatedField<RawResourceItem> {
        ::std::mem::replace(&mut self.request_raw_resource, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TokenBucketRequestRequestRawResource {
    fn is_initialized(&self) -> bool {
        for v in &self.request_raw_resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.request_raw_resource)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.request_raw_resource {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.request_raw_resource {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenBucketRequestRequestRawResource {
        TokenBucketRequestRequestRawResource::new()
    }

    fn default_instance() -> &'static TokenBucketRequestRequestRawResource {
        static mut instance: ::protobuf::lazy::Lazy<TokenBucketRequestRequestRawResource> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenBucketRequestRequestRawResource,
        };
        unsafe {
            instance.get(TokenBucketRequestRequestRawResource::new)
        }
    }
}

impl ::protobuf::Clear for TokenBucketRequestRequestRawResource {
    fn clear(&mut self) {
        self.request_raw_resource.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TokenBucketRequestRequestRawResource {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.request_raw_resource, "request_raw_resource", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TokenBucketRequestRequestRawResource {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.request_raw_resource, "request_raw_resource", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenBucketRequestRequestRawResource {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenBucketsResponse {
    // message fields
    pub error: ::protobuf::SingularPtrField<Error>,
    pub responses: ::protobuf::RepeatedField<TokenBucketResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenBucketsResponse {
    fn default() -> &'a TokenBucketsResponse {
        <TokenBucketsResponse as ::protobuf::Message>::default_instance()
    }
}

impl TokenBucketsResponse {
    pub fn new() -> TokenBucketsResponse {
        ::std::default::Default::default()
    }

    // .resource_manager.Error error = 1;


    pub fn get_error(&self) -> &Error {
        self.error.as_ref().unwrap_or_else(|| Error::default_instance())
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    pub fn has_error(&self) -> bool {
        self.error.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: Error) {
        self.error = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut Error {
        if self.error.is_none() {
            self.error.set_default();
        }
        self.error.as_mut().unwrap()
    }

    // Take field
    pub fn take_error(&mut self) -> Error {
        self.error.take().unwrap_or_else(|| Error::new())
    }

    // repeated .resource_manager.TokenBucketResponse responses = 2;


    pub fn get_responses(&self) -> &[TokenBucketResponse] {
        &self.responses
    }
    pub fn clear_responses(&mut self) {
        self.responses.clear();
    }

    // Param is passed by value, moved
    pub fn set_responses(&mut self, v: ::protobuf::RepeatedField<TokenBucketResponse>) {
        self.responses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_responses(&mut self) -> &mut ::protobuf::RepeatedField<TokenBucketResponse> {
        &mut self.responses
    }

    // Take field
    pub fn take_responses(&mut self) -> ::protobuf::RepeatedField<TokenBucketResponse> {
        ::std::mem::replace(&mut self.responses, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TokenBucketsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.error {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.responses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.responses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.error.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.error.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.responses {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenBucketsResponse {
        TokenBucketsResponse::new()
    }

    fn default_instance() -> &'static TokenBucketsResponse {
        static mut instance: ::protobuf::lazy::Lazy<TokenBucketsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenBucketsResponse,
        };
        unsafe {
            instance.get(TokenBucketsResponse::new)
        }
    }
}

impl ::protobuf::Clear for TokenBucketsResponse {
    fn clear(&mut self) {
        self.error.clear();
        self.responses.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TokenBucketsResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.error, "error", buf);
        ::protobuf::PbPrint::fmt(&self.responses, "responses", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TokenBucketsResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.error, "error", &mut s);
        ::protobuf::PbPrint::fmt(&self.responses, "responses", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenBucketsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenBucketResponse {
    // message fields
    pub resource_group_name: ::std::string::String,
    pub granted_r_u_tokens: ::protobuf::RepeatedField<GrantedRuTokenBucket>,
    pub granted_resource_tokens: ::protobuf::RepeatedField<GrantedRawResourceTokenBucket>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenBucketResponse {
    fn default() -> &'a TokenBucketResponse {
        <TokenBucketResponse as ::protobuf::Message>::default_instance()
    }
}

impl TokenBucketResponse {
    pub fn new() -> TokenBucketResponse {
        ::std::default::Default::default()
    }

    // string resource_group_name = 1;


    pub fn get_resource_group_name(&self) -> &str {
        &self.resource_group_name
    }
    pub fn clear_resource_group_name(&mut self) {
        self.resource_group_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_group_name(&mut self, v: ::std::string::String) {
        self.resource_group_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_group_name(&mut self) -> &mut ::std::string::String {
        &mut self.resource_group_name
    }

    // Take field
    pub fn take_resource_group_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_group_name, ::std::string::String::new())
    }

    // repeated .resource_manager.GrantedRUTokenBucket granted_r_u_tokens = 2;


    pub fn get_granted_r_u_tokens(&self) -> &[GrantedRuTokenBucket] {
        &self.granted_r_u_tokens
    }
    pub fn clear_granted_r_u_tokens(&mut self) {
        self.granted_r_u_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_granted_r_u_tokens(&mut self, v: ::protobuf::RepeatedField<GrantedRuTokenBucket>) {
        self.granted_r_u_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_granted_r_u_tokens(&mut self) -> &mut ::protobuf::RepeatedField<GrantedRuTokenBucket> {
        &mut self.granted_r_u_tokens
    }

    // Take field
    pub fn take_granted_r_u_tokens(&mut self) -> ::protobuf::RepeatedField<GrantedRuTokenBucket> {
        ::std::mem::replace(&mut self.granted_r_u_tokens, ::protobuf::RepeatedField::new())
    }

    // repeated .resource_manager.GrantedRawResourceTokenBucket granted_resource_tokens = 3;


    pub fn get_granted_resource_tokens(&self) -> &[GrantedRawResourceTokenBucket] {
        &self.granted_resource_tokens
    }
    pub fn clear_granted_resource_tokens(&mut self) {
        self.granted_resource_tokens.clear();
    }

    // Param is passed by value, moved
    pub fn set_granted_resource_tokens(&mut self, v: ::protobuf::RepeatedField<GrantedRawResourceTokenBucket>) {
        self.granted_resource_tokens = v;
    }

    // Mutable pointer to the field.
    pub fn mut_granted_resource_tokens(&mut self) -> &mut ::protobuf::RepeatedField<GrantedRawResourceTokenBucket> {
        &mut self.granted_resource_tokens
    }

    // Take field
    pub fn take_granted_resource_tokens(&mut self) -> ::protobuf::RepeatedField<GrantedRawResourceTokenBucket> {
        ::std::mem::replace(&mut self.granted_resource_tokens, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TokenBucketResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.granted_r_u_tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.granted_resource_tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_group_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.granted_r_u_tokens)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.granted_resource_tokens)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.resource_group_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.resource_group_name);
        }
        for value in &self.granted_r_u_tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.granted_resource_tokens {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.resource_group_name.is_empty() {
            os.write_string(1, &self.resource_group_name)?;
        }
        for v in &self.granted_r_u_tokens {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.granted_resource_tokens {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenBucketResponse {
        TokenBucketResponse::new()
    }

    fn default_instance() -> &'static TokenBucketResponse {
        static mut instance: ::protobuf::lazy::Lazy<TokenBucketResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenBucketResponse,
        };
        unsafe {
            instance.get(TokenBucketResponse::new)
        }
    }
}

impl ::protobuf::Clear for TokenBucketResponse {
    fn clear(&mut self) {
        self.resource_group_name.clear();
        self.granted_r_u_tokens.clear();
        self.granted_resource_tokens.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TokenBucketResponse {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.resource_group_name, "resource_group_name", buf);
        ::protobuf::PbPrint::fmt(&self.granted_r_u_tokens, "granted_r_u_tokens", buf);
        ::protobuf::PbPrint::fmt(&self.granted_resource_tokens, "granted_resource_tokens", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TokenBucketResponse {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.resource_group_name, "resource_group_name", &mut s);
        ::protobuf::PbPrint::fmt(&self.granted_r_u_tokens, "granted_r_u_tokens", &mut s);
        ::protobuf::PbPrint::fmt(&self.granted_resource_tokens, "granted_resource_tokens", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenBucketResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrantedRuTokenBucket {
    // message fields
    pub r_type: RequestUnitType,
    pub granted_tokens: ::protobuf::SingularPtrField<TokenBucket>,
    pub trickle_time_ms: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrantedRuTokenBucket {
    fn default() -> &'a GrantedRuTokenBucket {
        <GrantedRuTokenBucket as ::protobuf::Message>::default_instance()
    }
}

impl GrantedRuTokenBucket {
    pub fn new() -> GrantedRuTokenBucket {
        ::std::default::Default::default()
    }

    // .resource_manager.RequestUnitType type = 1;


    pub fn get_type(&self) -> RequestUnitType {
        self.r_type
    }
    pub fn clear_type(&mut self) {
        self.r_type = RequestUnitType::Ru;
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: RequestUnitType) {
        self.r_type = v;
    }

    // .resource_manager.TokenBucket granted_tokens = 2;


    pub fn get_granted_tokens(&self) -> &TokenBucket {
        self.granted_tokens.as_ref().unwrap_or_else(|| TokenBucket::default_instance())
    }
    pub fn clear_granted_tokens(&mut self) {
        self.granted_tokens.clear();
    }

    pub fn has_granted_tokens(&self) -> bool {
        self.granted_tokens.is_some()
    }

    // Param is passed by value, moved
    pub fn set_granted_tokens(&mut self, v: TokenBucket) {
        self.granted_tokens = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granted_tokens(&mut self) -> &mut TokenBucket {
        if self.granted_tokens.is_none() {
            self.granted_tokens.set_default();
        }
        self.granted_tokens.as_mut().unwrap()
    }

    // Take field
    pub fn take_granted_tokens(&mut self) -> TokenBucket {
        self.granted_tokens.take().unwrap_or_else(|| TokenBucket::new())
    }

    // int64 trickle_time_ms = 3;


    pub fn get_trickle_time_ms(&self) -> i64 {
        self.trickle_time_ms
    }
    pub fn clear_trickle_time_ms(&mut self) {
        self.trickle_time_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_trickle_time_ms(&mut self, v: i64) {
        self.trickle_time_ms = v;
    }
}

impl ::protobuf::Message for GrantedRuTokenBucket {
    fn is_initialized(&self) -> bool {
        for v in &self.granted_tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.r_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.granted_tokens)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.trickle_time_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.r_type != RequestUnitType::Ru {
            my_size += ::protobuf::rt::enum_size(1, self.r_type);
        }
        if let Some(ref v) = self.granted_tokens.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.trickle_time_ms != 0 {
            my_size += ::protobuf::rt::value_size(3, self.trickle_time_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.r_type != RequestUnitType::Ru {
            os.write_enum(1, self.r_type.value())?;
        }
        if let Some(ref v) = self.granted_tokens.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.trickle_time_ms != 0 {
            os.write_int64(3, self.trickle_time_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrantedRuTokenBucket {
        GrantedRuTokenBucket::new()
    }

    fn default_instance() -> &'static GrantedRuTokenBucket {
        static mut instance: ::protobuf::lazy::Lazy<GrantedRuTokenBucket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GrantedRuTokenBucket,
        };
        unsafe {
            instance.get(GrantedRuTokenBucket::new)
        }
    }
}

impl ::protobuf::Clear for GrantedRuTokenBucket {
    fn clear(&mut self) {
        self.r_type = RequestUnitType::Ru;
        self.granted_tokens.clear();
        self.trickle_time_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for GrantedRuTokenBucket {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", buf);
        ::protobuf::PbPrint::fmt(&self.granted_tokens, "granted_tokens", buf);
        ::protobuf::PbPrint::fmt(&self.trickle_time_ms, "trickle_time_ms", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for GrantedRuTokenBucket {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", &mut s);
        ::protobuf::PbPrint::fmt(&self.granted_tokens, "granted_tokens", &mut s);
        ::protobuf::PbPrint::fmt(&self.trickle_time_ms, "trickle_time_ms", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrantedRuTokenBucket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrantedRawResourceTokenBucket {
    // message fields
    pub r_type: RawResourceType,
    pub granted_tokens: ::protobuf::SingularPtrField<TokenBucket>,
    pub trickle_time_ms: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrantedRawResourceTokenBucket {
    fn default() -> &'a GrantedRawResourceTokenBucket {
        <GrantedRawResourceTokenBucket as ::protobuf::Message>::default_instance()
    }
}

impl GrantedRawResourceTokenBucket {
    pub fn new() -> GrantedRawResourceTokenBucket {
        ::std::default::Default::default()
    }

    // .resource_manager.RawResourceType type = 1;


    pub fn get_type(&self) -> RawResourceType {
        self.r_type
    }
    pub fn clear_type(&mut self) {
        self.r_type = RawResourceType::Cpu;
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: RawResourceType) {
        self.r_type = v;
    }

    // .resource_manager.TokenBucket granted_tokens = 2;


    pub fn get_granted_tokens(&self) -> &TokenBucket {
        self.granted_tokens.as_ref().unwrap_or_else(|| TokenBucket::default_instance())
    }
    pub fn clear_granted_tokens(&mut self) {
        self.granted_tokens.clear();
    }

    pub fn has_granted_tokens(&self) -> bool {
        self.granted_tokens.is_some()
    }

    // Param is passed by value, moved
    pub fn set_granted_tokens(&mut self, v: TokenBucket) {
        self.granted_tokens = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granted_tokens(&mut self) -> &mut TokenBucket {
        if self.granted_tokens.is_none() {
            self.granted_tokens.set_default();
        }
        self.granted_tokens.as_mut().unwrap()
    }

    // Take field
    pub fn take_granted_tokens(&mut self) -> TokenBucket {
        self.granted_tokens.take().unwrap_or_else(|| TokenBucket::new())
    }

    // int64 trickle_time_ms = 3;


    pub fn get_trickle_time_ms(&self) -> i64 {
        self.trickle_time_ms
    }
    pub fn clear_trickle_time_ms(&mut self) {
        self.trickle_time_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_trickle_time_ms(&mut self, v: i64) {
        self.trickle_time_ms = v;
    }
}

impl ::protobuf::Message for GrantedRawResourceTokenBucket {
    fn is_initialized(&self) -> bool {
        for v in &self.granted_tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.r_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.granted_tokens)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.trickle_time_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.r_type != RawResourceType::Cpu {
            my_size += ::protobuf::rt::enum_size(1, self.r_type);
        }
        if let Some(ref v) = self.granted_tokens.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.trickle_time_ms != 0 {
            my_size += ::protobuf::rt::value_size(3, self.trickle_time_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.r_type != RawResourceType::Cpu {
            os.write_enum(1, self.r_type.value())?;
        }
        if let Some(ref v) = self.granted_tokens.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.trickle_time_ms != 0 {
            os.write_int64(3, self.trickle_time_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrantedRawResourceTokenBucket {
        GrantedRawResourceTokenBucket::new()
    }

    fn default_instance() -> &'static GrantedRawResourceTokenBucket {
        static mut instance: ::protobuf::lazy::Lazy<GrantedRawResourceTokenBucket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GrantedRawResourceTokenBucket,
        };
        unsafe {
            instance.get(GrantedRawResourceTokenBucket::new)
        }
    }
}

impl ::protobuf::Clear for GrantedRawResourceTokenBucket {
    fn clear(&mut self) {
        self.r_type = RawResourceType::Cpu;
        self.granted_tokens.clear();
        self.trickle_time_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for GrantedRawResourceTokenBucket {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", buf);
        ::protobuf::PbPrint::fmt(&self.granted_tokens, "granted_tokens", buf);
        ::protobuf::PbPrint::fmt(&self.trickle_time_ms, "trickle_time_ms", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for GrantedRawResourceTokenBucket {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", &mut s);
        ::protobuf::PbPrint::fmt(&self.granted_tokens, "granted_tokens", &mut s);
        ::protobuf::PbPrint::fmt(&self.trickle_time_ms, "trickle_time_ms", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrantedRawResourceTokenBucket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Consumption {
    // message fields
    pub r_r_u: f64,
    pub w_r_u: f64,
    pub read_bytes: f64,
    pub write_bytes: f64,
    pub total_cpu_time_ms: f64,
    pub sql_layer_cpu_time_ms: f64,
    pub kv_read_rpc_count: f64,
    pub kv_write_rpc_count: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Consumption {
    fn default() -> &'a Consumption {
        <Consumption as ::protobuf::Message>::default_instance()
    }
}

impl Consumption {
    pub fn new() -> Consumption {
        ::std::default::Default::default()
    }

    // double r_r_u = 1;


    pub fn get_r_r_u(&self) -> f64 {
        self.r_r_u
    }
    pub fn clear_r_r_u(&mut self) {
        self.r_r_u = 0.;
    }

    // Param is passed by value, moved
    pub fn set_r_r_u(&mut self, v: f64) {
        self.r_r_u = v;
    }

    // double w_r_u = 2;


    pub fn get_w_r_u(&self) -> f64 {
        self.w_r_u
    }
    pub fn clear_w_r_u(&mut self) {
        self.w_r_u = 0.;
    }

    // Param is passed by value, moved
    pub fn set_w_r_u(&mut self, v: f64) {
        self.w_r_u = v;
    }

    // double read_bytes = 3;


    pub fn get_read_bytes(&self) -> f64 {
        self.read_bytes
    }
    pub fn clear_read_bytes(&mut self) {
        self.read_bytes = 0.;
    }

    // Param is passed by value, moved
    pub fn set_read_bytes(&mut self, v: f64) {
        self.read_bytes = v;
    }

    // double write_bytes = 4;


    pub fn get_write_bytes(&self) -> f64 {
        self.write_bytes
    }
    pub fn clear_write_bytes(&mut self) {
        self.write_bytes = 0.;
    }

    // Param is passed by value, moved
    pub fn set_write_bytes(&mut self, v: f64) {
        self.write_bytes = v;
    }

    // double total_cpu_time_ms = 5;


    pub fn get_total_cpu_time_ms(&self) -> f64 {
        self.total_cpu_time_ms
    }
    pub fn clear_total_cpu_time_ms(&mut self) {
        self.total_cpu_time_ms = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_cpu_time_ms(&mut self, v: f64) {
        self.total_cpu_time_ms = v;
    }

    // double sql_layer_cpu_time_ms = 6;


    pub fn get_sql_layer_cpu_time_ms(&self) -> f64 {
        self.sql_layer_cpu_time_ms
    }
    pub fn clear_sql_layer_cpu_time_ms(&mut self) {
        self.sql_layer_cpu_time_ms = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sql_layer_cpu_time_ms(&mut self, v: f64) {
        self.sql_layer_cpu_time_ms = v;
    }

    // double kv_read_rpc_count = 7;


    pub fn get_kv_read_rpc_count(&self) -> f64 {
        self.kv_read_rpc_count
    }
    pub fn clear_kv_read_rpc_count(&mut self) {
        self.kv_read_rpc_count = 0.;
    }

    // Param is passed by value, moved
    pub fn set_kv_read_rpc_count(&mut self, v: f64) {
        self.kv_read_rpc_count = v;
    }

    // double kv_write_rpc_count = 8;


    pub fn get_kv_write_rpc_count(&self) -> f64 {
        self.kv_write_rpc_count
    }
    pub fn clear_kv_write_rpc_count(&mut self) {
        self.kv_write_rpc_count = 0.;
    }

    // Param is passed by value, moved
    pub fn set_kv_write_rpc_count(&mut self, v: f64) {
        self.kv_write_rpc_count = v;
    }
}

impl ::protobuf::Message for Consumption {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.r_r_u = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.w_r_u = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.read_bytes = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.write_bytes = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_cpu_time_ms = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sql_layer_cpu_time_ms = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.kv_read_rpc_count = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.kv_write_rpc_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.r_r_u != 0. {
            my_size += 9;
        }
        if self.w_r_u != 0. {
            my_size += 9;
        }
        if self.read_bytes != 0. {
            my_size += 9;
        }
        if self.write_bytes != 0. {
            my_size += 9;
        }
        if self.total_cpu_time_ms != 0. {
            my_size += 9;
        }
        if self.sql_layer_cpu_time_ms != 0. {
            my_size += 9;
        }
        if self.kv_read_rpc_count != 0. {
            my_size += 9;
        }
        if self.kv_write_rpc_count != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.r_r_u != 0. {
            os.write_double(1, self.r_r_u)?;
        }
        if self.w_r_u != 0. {
            os.write_double(2, self.w_r_u)?;
        }
        if self.read_bytes != 0. {
            os.write_double(3, self.read_bytes)?;
        }
        if self.write_bytes != 0. {
            os.write_double(4, self.write_bytes)?;
        }
        if self.total_cpu_time_ms != 0. {
            os.write_double(5, self.total_cpu_time_ms)?;
        }
        if self.sql_layer_cpu_time_ms != 0. {
            os.write_double(6, self.sql_layer_cpu_time_ms)?;
        }
        if self.kv_read_rpc_count != 0. {
            os.write_double(7, self.kv_read_rpc_count)?;
        }
        if self.kv_write_rpc_count != 0. {
            os.write_double(8, self.kv_write_rpc_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Consumption {
        Consumption::new()
    }

    fn default_instance() -> &'static Consumption {
        static mut instance: ::protobuf::lazy::Lazy<Consumption> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Consumption,
        };
        unsafe {
            instance.get(Consumption::new)
        }
    }
}

impl ::protobuf::Clear for Consumption {
    fn clear(&mut self) {
        self.r_r_u = 0.;
        self.w_r_u = 0.;
        self.read_bytes = 0.;
        self.write_bytes = 0.;
        self.total_cpu_time_ms = 0.;
        self.sql_layer_cpu_time_ms = 0.;
        self.kv_read_rpc_count = 0.;
        self.kv_write_rpc_count = 0.;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Consumption {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.r_r_u, "r_r_u", buf);
        ::protobuf::PbPrint::fmt(&self.w_r_u, "w_r_u", buf);
        ::protobuf::PbPrint::fmt(&self.read_bytes, "read_bytes", buf);
        ::protobuf::PbPrint::fmt(&self.write_bytes, "write_bytes", buf);
        ::protobuf::PbPrint::fmt(&self.total_cpu_time_ms, "total_cpu_time_ms", buf);
        ::protobuf::PbPrint::fmt(&self.sql_layer_cpu_time_ms, "sql_layer_cpu_time_ms", buf);
        ::protobuf::PbPrint::fmt(&self.kv_read_rpc_count, "kv_read_rpc_count", buf);
        ::protobuf::PbPrint::fmt(&self.kv_write_rpc_count, "kv_write_rpc_count", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Consumption {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.r_r_u, "r_r_u", &mut s);
        ::protobuf::PbPrint::fmt(&self.w_r_u, "w_r_u", &mut s);
        ::protobuf::PbPrint::fmt(&self.read_bytes, "read_bytes", &mut s);
        ::protobuf::PbPrint::fmt(&self.write_bytes, "write_bytes", &mut s);
        ::protobuf::PbPrint::fmt(&self.total_cpu_time_ms, "total_cpu_time_ms", &mut s);
        ::protobuf::PbPrint::fmt(&self.sql_layer_cpu_time_ms, "sql_layer_cpu_time_ms", &mut s);
        ::protobuf::PbPrint::fmt(&self.kv_read_rpc_count, "kv_read_rpc_count", &mut s);
        ::protobuf::PbPrint::fmt(&self.kv_write_rpc_count, "kv_write_rpc_count", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Consumption {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestUnitItem {
    // message fields
    pub r_type: RequestUnitType,
    pub value: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestUnitItem {
    fn default() -> &'a RequestUnitItem {
        <RequestUnitItem as ::protobuf::Message>::default_instance()
    }
}

impl RequestUnitItem {
    pub fn new() -> RequestUnitItem {
        ::std::default::Default::default()
    }

    // .resource_manager.RequestUnitType type = 1;


    pub fn get_type(&self) -> RequestUnitType {
        self.r_type
    }
    pub fn clear_type(&mut self) {
        self.r_type = RequestUnitType::Ru;
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: RequestUnitType) {
        self.r_type = v;
    }

    // double value = 2;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }
}

impl ::protobuf::Message for RequestUnitItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.r_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.r_type != RequestUnitType::Ru {
            my_size += ::protobuf::rt::enum_size(1, self.r_type);
        }
        if self.value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.r_type != RequestUnitType::Ru {
            os.write_enum(1, self.r_type.value())?;
        }
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestUnitItem {
        RequestUnitItem::new()
    }

    fn default_instance() -> &'static RequestUnitItem {
        static mut instance: ::protobuf::lazy::Lazy<RequestUnitItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RequestUnitItem,
        };
        unsafe {
            instance.get(RequestUnitItem::new)
        }
    }
}

impl ::protobuf::Clear for RequestUnitItem {
    fn clear(&mut self) {
        self.r_type = RequestUnitType::Ru;
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for RequestUnitItem {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", buf);
        ::protobuf::PbPrint::fmt(&self.value, "value", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RequestUnitItem {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", &mut s);
        ::protobuf::PbPrint::fmt(&self.value, "value", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestUnitItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RawResourceItem {
    // message fields
    pub r_type: RawResourceType,
    pub value: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RawResourceItem {
    fn default() -> &'a RawResourceItem {
        <RawResourceItem as ::protobuf::Message>::default_instance()
    }
}

impl RawResourceItem {
    pub fn new() -> RawResourceItem {
        ::std::default::Default::default()
    }

    // .resource_manager.RawResourceType type = 1;


    pub fn get_type(&self) -> RawResourceType {
        self.r_type
    }
    pub fn clear_type(&mut self) {
        self.r_type = RawResourceType::Cpu;
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: RawResourceType) {
        self.r_type = v;
    }

    // double value = 2;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }
}

impl ::protobuf::Message for RawResourceItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.r_type = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.r_type != RawResourceType::Cpu {
            my_size += ::protobuf::rt::enum_size(1, self.r_type);
        }
        if self.value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.r_type != RawResourceType::Cpu {
            os.write_enum(1, self.r_type.value())?;
        }
        if self.value != 0. {
            os.write_double(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RawResourceItem {
        RawResourceItem::new()
    }

    fn default_instance() -> &'static RawResourceItem {
        static mut instance: ::protobuf::lazy::Lazy<RawResourceItem> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RawResourceItem,
        };
        unsafe {
            instance.get(RawResourceItem::new)
        }
    }
}

impl ::protobuf::Clear for RawResourceItem {
    fn clear(&mut self) {
        self.r_type = RawResourceType::Cpu;
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for RawResourceItem {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", buf);
        ::protobuf::PbPrint::fmt(&self.value, "value", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for RawResourceItem {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.r_type, "r_type", &mut s);
        ::protobuf::PbPrint::fmt(&self.value, "value", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawResourceItem {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResourceGroup {
    // message fields
    pub name: ::std::string::String,
    pub mode: GroupMode,
    pub r_u_settings: ::protobuf::SingularPtrField<GroupRequestUnitSettings>,
    pub raw_resource_settings: ::protobuf::SingularPtrField<GroupRawResourceSettings>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceGroup {
    fn default() -> &'a ResourceGroup {
        <ResourceGroup as ::protobuf::Message>::default_instance()
    }
}

impl ResourceGroup {
    pub fn new() -> ResourceGroup {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .resource_manager.GroupMode mode = 2;


    pub fn get_mode(&self) -> GroupMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = GroupMode::Unknown;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: GroupMode) {
        self.mode = v;
    }

    // .resource_manager.GroupRequestUnitSettings r_u_settings = 3;


    pub fn get_r_u_settings(&self) -> &GroupRequestUnitSettings {
        self.r_u_settings.as_ref().unwrap_or_else(|| GroupRequestUnitSettings::default_instance())
    }
    pub fn clear_r_u_settings(&mut self) {
        self.r_u_settings.clear();
    }

    pub fn has_r_u_settings(&self) -> bool {
        self.r_u_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_r_u_settings(&mut self, v: GroupRequestUnitSettings) {
        self.r_u_settings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_r_u_settings(&mut self) -> &mut GroupRequestUnitSettings {
        if self.r_u_settings.is_none() {
            self.r_u_settings.set_default();
        }
        self.r_u_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_r_u_settings(&mut self) -> GroupRequestUnitSettings {
        self.r_u_settings.take().unwrap_or_else(|| GroupRequestUnitSettings::new())
    }

    // .resource_manager.GroupRawResourceSettings raw_resource_settings = 4;


    pub fn get_raw_resource_settings(&self) -> &GroupRawResourceSettings {
        self.raw_resource_settings.as_ref().unwrap_or_else(|| GroupRawResourceSettings::default_instance())
    }
    pub fn clear_raw_resource_settings(&mut self) {
        self.raw_resource_settings.clear();
    }

    pub fn has_raw_resource_settings(&self) -> bool {
        self.raw_resource_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw_resource_settings(&mut self, v: GroupRawResourceSettings) {
        self.raw_resource_settings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_resource_settings(&mut self) -> &mut GroupRawResourceSettings {
        if self.raw_resource_settings.is_none() {
            self.raw_resource_settings.set_default();
        }
        self.raw_resource_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_raw_resource_settings(&mut self) -> GroupRawResourceSettings {
        self.raw_resource_settings.take().unwrap_or_else(|| GroupRawResourceSettings::new())
    }
}

impl ::protobuf::Message for ResourceGroup {
    fn is_initialized(&self) -> bool {
        for v in &self.r_u_settings {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.raw_resource_settings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type == ::protobuf::wire_format::WireTypeVarint {self.mode = is.read_enum()?;} else {return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));}
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.r_u_settings)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.raw_resource_settings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.mode != GroupMode::Unknown {
            my_size += ::protobuf::rt::enum_size(2, self.mode);
        }
        if let Some(ref v) = self.r_u_settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.raw_resource_settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.mode != GroupMode::Unknown {
            os.write_enum(2, self.mode.value())?;
        }
        if let Some(ref v) = self.r_u_settings.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.raw_resource_settings.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceGroup {
        ResourceGroup::new()
    }

    fn default_instance() -> &'static ResourceGroup {
        static mut instance: ::protobuf::lazy::Lazy<ResourceGroup> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResourceGroup,
        };
        unsafe {
            instance.get(ResourceGroup::new)
        }
    }
}

impl ::protobuf::Clear for ResourceGroup {
    fn clear(&mut self) {
        self.name.clear();
        self.mode = GroupMode::Unknown;
        self.r_u_settings.clear();
        self.raw_resource_settings.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for ResourceGroup {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.name, "name", buf);
        ::protobuf::PbPrint::fmt(&self.mode, "mode", buf);
        ::protobuf::PbPrint::fmt(&self.r_u_settings, "r_u_settings", buf);
        ::protobuf::PbPrint::fmt(&self.raw_resource_settings, "raw_resource_settings", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for ResourceGroup {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.name, "name", &mut s);
        ::protobuf::PbPrint::fmt(&self.mode, "mode", &mut s);
        ::protobuf::PbPrint::fmt(&self.r_u_settings, "r_u_settings", &mut s);
        ::protobuf::PbPrint::fmt(&self.raw_resource_settings, "raw_resource_settings", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceGroup {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GroupRequestUnitSettings {
    // message fields
    pub r_u: ::protobuf::SingularPtrField<TokenBucket>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GroupRequestUnitSettings {
    fn default() -> &'a GroupRequestUnitSettings {
        <GroupRequestUnitSettings as ::protobuf::Message>::default_instance()
    }
}

impl GroupRequestUnitSettings {
    pub fn new() -> GroupRequestUnitSettings {
        ::std::default::Default::default()
    }

    // .resource_manager.TokenBucket r_u = 1;


    pub fn get_r_u(&self) -> &TokenBucket {
        self.r_u.as_ref().unwrap_or_else(|| TokenBucket::default_instance())
    }
    pub fn clear_r_u(&mut self) {
        self.r_u.clear();
    }

    pub fn has_r_u(&self) -> bool {
        self.r_u.is_some()
    }

    // Param is passed by value, moved
    pub fn set_r_u(&mut self, v: TokenBucket) {
        self.r_u = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_r_u(&mut self) -> &mut TokenBucket {
        if self.r_u.is_none() {
            self.r_u.set_default();
        }
        self.r_u.as_mut().unwrap()
    }

    // Take field
    pub fn take_r_u(&mut self) -> TokenBucket {
        self.r_u.take().unwrap_or_else(|| TokenBucket::new())
    }
}

impl ::protobuf::Message for GroupRequestUnitSettings {
    fn is_initialized(&self) -> bool {
        for v in &self.r_u {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.r_u)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.r_u.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.r_u.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GroupRequestUnitSettings {
        GroupRequestUnitSettings::new()
    }

    fn default_instance() -> &'static GroupRequestUnitSettings {
        static mut instance: ::protobuf::lazy::Lazy<GroupRequestUnitSettings> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GroupRequestUnitSettings,
        };
        unsafe {
            instance.get(GroupRequestUnitSettings::new)
        }
    }
}

impl ::protobuf::Clear for GroupRequestUnitSettings {
    fn clear(&mut self) {
        self.r_u.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for GroupRequestUnitSettings {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.r_u, "r_u", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for GroupRequestUnitSettings {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.r_u, "r_u", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for GroupRequestUnitSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GroupRawResourceSettings {
    // message fields
    pub cpu: ::protobuf::SingularPtrField<TokenBucket>,
    pub io_read: ::protobuf::SingularPtrField<TokenBucket>,
    pub io_write: ::protobuf::SingularPtrField<TokenBucket>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GroupRawResourceSettings {
    fn default() -> &'a GroupRawResourceSettings {
        <GroupRawResourceSettings as ::protobuf::Message>::default_instance()
    }
}

impl GroupRawResourceSettings {
    pub fn new() -> GroupRawResourceSettings {
        ::std::default::Default::default()
    }

    // .resource_manager.TokenBucket cpu = 1;


    pub fn get_cpu(&self) -> &TokenBucket {
        self.cpu.as_ref().unwrap_or_else(|| TokenBucket::default_instance())
    }
    pub fn clear_cpu(&mut self) {
        self.cpu.clear();
    }

    pub fn has_cpu(&self) -> bool {
        self.cpu.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cpu(&mut self, v: TokenBucket) {
        self.cpu = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cpu(&mut self) -> &mut TokenBucket {
        if self.cpu.is_none() {
            self.cpu.set_default();
        }
        self.cpu.as_mut().unwrap()
    }

    // Take field
    pub fn take_cpu(&mut self) -> TokenBucket {
        self.cpu.take().unwrap_or_else(|| TokenBucket::new())
    }

    // .resource_manager.TokenBucket io_read = 2;


    pub fn get_io_read(&self) -> &TokenBucket {
        self.io_read.as_ref().unwrap_or_else(|| TokenBucket::default_instance())
    }
    pub fn clear_io_read(&mut self) {
        self.io_read.clear();
    }

    pub fn has_io_read(&self) -> bool {
        self.io_read.is_some()
    }

    // Param is passed by value, moved
    pub fn set_io_read(&mut self, v: TokenBucket) {
        self.io_read = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_io_read(&mut self) -> &mut TokenBucket {
        if self.io_read.is_none() {
            self.io_read.set_default();
        }
        self.io_read.as_mut().unwrap()
    }

    // Take field
    pub fn take_io_read(&mut self) -> TokenBucket {
        self.io_read.take().unwrap_or_else(|| TokenBucket::new())
    }

    // .resource_manager.TokenBucket io_write = 3;


    pub fn get_io_write(&self) -> &TokenBucket {
        self.io_write.as_ref().unwrap_or_else(|| TokenBucket::default_instance())
    }
    pub fn clear_io_write(&mut self) {
        self.io_write.clear();
    }

    pub fn has_io_write(&self) -> bool {
        self.io_write.is_some()
    }

    // Param is passed by value, moved
    pub fn set_io_write(&mut self, v: TokenBucket) {
        self.io_write = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_io_write(&mut self) -> &mut TokenBucket {
        if self.io_write.is_none() {
            self.io_write.set_default();
        }
        self.io_write.as_mut().unwrap()
    }

    // Take field
    pub fn take_io_write(&mut self) -> TokenBucket {
        self.io_write.take().unwrap_or_else(|| TokenBucket::new())
    }
}

impl ::protobuf::Message for GroupRawResourceSettings {
    fn is_initialized(&self) -> bool {
        for v in &self.cpu {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.io_read {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.io_write {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cpu)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.io_read)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.io_write)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.cpu.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.io_read.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.io_write.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.cpu.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.io_read.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.io_write.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GroupRawResourceSettings {
        GroupRawResourceSettings::new()
    }

    fn default_instance() -> &'static GroupRawResourceSettings {
        static mut instance: ::protobuf::lazy::Lazy<GroupRawResourceSettings> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GroupRawResourceSettings,
        };
        unsafe {
            instance.get(GroupRawResourceSettings::new)
        }
    }
}

impl ::protobuf::Clear for GroupRawResourceSettings {
    fn clear(&mut self) {
        self.cpu.clear();
        self.io_read.clear();
        self.io_write.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for GroupRawResourceSettings {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.cpu, "cpu", buf);
        ::protobuf::PbPrint::fmt(&self.io_read, "io_read", buf);
        ::protobuf::PbPrint::fmt(&self.io_write, "io_write", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for GroupRawResourceSettings {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.cpu, "cpu", &mut s);
        ::protobuf::PbPrint::fmt(&self.io_read, "io_read", &mut s);
        ::protobuf::PbPrint::fmt(&self.io_write, "io_write", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for GroupRawResourceSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenBucket {
    // message fields
    pub settings: ::protobuf::SingularPtrField<TokenLimitSettings>,
    pub tokens: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenBucket {
    fn default() -> &'a TokenBucket {
        <TokenBucket as ::protobuf::Message>::default_instance()
    }
}

impl TokenBucket {
    pub fn new() -> TokenBucket {
        ::std::default::Default::default()
    }

    // .resource_manager.TokenLimitSettings settings = 1;


    pub fn get_settings(&self) -> &TokenLimitSettings {
        self.settings.as_ref().unwrap_or_else(|| TokenLimitSettings::default_instance())
    }
    pub fn clear_settings(&mut self) {
        self.settings.clear();
    }

    pub fn has_settings(&self) -> bool {
        self.settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_settings(&mut self, v: TokenLimitSettings) {
        self.settings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_settings(&mut self) -> &mut TokenLimitSettings {
        if self.settings.is_none() {
            self.settings.set_default();
        }
        self.settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_settings(&mut self) -> TokenLimitSettings {
        self.settings.take().unwrap_or_else(|| TokenLimitSettings::new())
    }

    // double tokens = 2;


    pub fn get_tokens(&self) -> f64 {
        self.tokens
    }
    pub fn clear_tokens(&mut self) {
        self.tokens = 0.;
    }

    // Param is passed by value, moved
    pub fn set_tokens(&mut self, v: f64) {
        self.tokens = v;
    }
}

impl ::protobuf::Message for TokenBucket {
    fn is_initialized(&self) -> bool {
        for v in &self.settings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.settings)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.tokens = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.tokens != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.settings.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.tokens != 0. {
            os.write_double(2, self.tokens)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenBucket {
        TokenBucket::new()
    }

    fn default_instance() -> &'static TokenBucket {
        static mut instance: ::protobuf::lazy::Lazy<TokenBucket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenBucket,
        };
        unsafe {
            instance.get(TokenBucket::new)
        }
    }
}

impl ::protobuf::Clear for TokenBucket {
    fn clear(&mut self) {
        self.settings.clear();
        self.tokens = 0.;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TokenBucket {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.settings, "settings", buf);
        ::protobuf::PbPrint::fmt(&self.tokens, "tokens", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TokenBucket {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.settings, "settings", &mut s);
        ::protobuf::PbPrint::fmt(&self.tokens, "tokens", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenBucket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenLimitSettings {
    // message fields
    pub fill_rate: u64,
    pub burst_limit: i64,
    pub max_tokens: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenLimitSettings {
    fn default() -> &'a TokenLimitSettings {
        <TokenLimitSettings as ::protobuf::Message>::default_instance()
    }
}

impl TokenLimitSettings {
    pub fn new() -> TokenLimitSettings {
        ::std::default::Default::default()
    }

    // uint64 fill_rate = 1;


    pub fn get_fill_rate(&self) -> u64 {
        self.fill_rate
    }
    pub fn clear_fill_rate(&mut self) {
        self.fill_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_fill_rate(&mut self, v: u64) {
        self.fill_rate = v;
    }

    // int64 burst_limit = 2;


    pub fn get_burst_limit(&self) -> i64 {
        self.burst_limit
    }
    pub fn clear_burst_limit(&mut self) {
        self.burst_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_burst_limit(&mut self, v: i64) {
        self.burst_limit = v;
    }

    // double max_tokens = 3;


    pub fn get_max_tokens(&self) -> f64 {
        self.max_tokens
    }
    pub fn clear_max_tokens(&mut self) {
        self.max_tokens = 0.;
    }

    // Param is passed by value, moved
    pub fn set_max_tokens(&mut self, v: f64) {
        self.max_tokens = v;
    }
}

impl ::protobuf::Message for TokenLimitSettings {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.fill_rate = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.burst_limit = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.max_tokens = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fill_rate != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fill_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.burst_limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.burst_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_tokens != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.fill_rate != 0 {
            os.write_uint64(1, self.fill_rate)?;
        }
        if self.burst_limit != 0 {
            os.write_int64(2, self.burst_limit)?;
        }
        if self.max_tokens != 0. {
            os.write_double(3, self.max_tokens)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenLimitSettings {
        TokenLimitSettings::new()
    }

    fn default_instance() -> &'static TokenLimitSettings {
        static mut instance: ::protobuf::lazy::Lazy<TokenLimitSettings> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TokenLimitSettings,
        };
        unsafe {
            instance.get(TokenLimitSettings::new)
        }
    }
}

impl ::protobuf::Clear for TokenLimitSettings {
    fn clear(&mut self) {
        self.fill_rate = 0;
        self.burst_limit = 0;
        self.max_tokens = 0.;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for TokenLimitSettings {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.fill_rate, "fill_rate", buf);
        ::protobuf::PbPrint::fmt(&self.burst_limit, "burst_limit", buf);
        ::protobuf::PbPrint::fmt(&self.max_tokens, "max_tokens", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for TokenLimitSettings {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.fill_rate, "fill_rate", &mut s);
        ::protobuf::PbPrint::fmt(&self.burst_limit, "burst_limit", &mut s);
        ::protobuf::PbPrint::fmt(&self.max_tokens, "max_tokens", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenLimitSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Error {
    // message fields
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Error {
    fn default() -> &'a Error {
        <Error as ::protobuf::Message>::default_instance()
    }
}

impl Error {
    pub fn new() -> Error {
        ::std::default::Default::default()
    }

    // string message = 1;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Error {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.message.is_empty() {
            os.write_string(1, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Error {
        Error::new()
    }

    fn default_instance() -> &'static Error {
        static mut instance: ::protobuf::lazy::Lazy<Error> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Error,
        };
        unsafe {
            instance.get(Error::new)
        }
    }
}

impl ::protobuf::Clear for Error {
    fn clear(&mut self) {
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::PbPrint for Error {
    #[allow(unused_variables)]
    fn fmt(&self, name: &str, buf: &mut String) {
        ::protobuf::push_message_start(name, buf);
        let old_len = buf.len();
        ::protobuf::PbPrint::fmt(&self.message, "message", buf);
        if old_len < buf.len() {
          buf.push(' ');
        }
        buf.push('}');
    }
}
impl ::std::fmt::Debug for Error {
    #[allow(unused_variables)]
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        let mut s = String::new();
        ::protobuf::PbPrint::fmt(&self.message, "message", &mut s);
        write!(f, "{}", s)
    }
}

impl ::protobuf::reflect::ProtobufValue for Error {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RequestUnitType {
    Ru = 0,
}

impl ::protobuf::ProtobufEnum for RequestUnitType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RequestUnitType> {
        match value {
            0 => ::std::option::Option::Some(RequestUnitType::Ru),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RequestUnitType] = &[
            RequestUnitType::Ru,
        ];
        values
    }
}

impl ::std::marker::Copy for RequestUnitType {
}

impl ::protobuf::PbPrint for RequestUnitType {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == RequestUnitType::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for RequestUnitType {
    fn default() -> Self {
        RequestUnitType::Ru
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestUnitType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RawResourceType {
    Cpu = 0,
    IoReadFlow = 1,
    IoWriteFlow = 2,
}

impl ::protobuf::ProtobufEnum for RawResourceType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RawResourceType> {
        match value {
            0 => ::std::option::Option::Some(RawResourceType::Cpu),
            1 => ::std::option::Option::Some(RawResourceType::IoReadFlow),
            2 => ::std::option::Option::Some(RawResourceType::IoWriteFlow),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RawResourceType] = &[
            RawResourceType::Cpu,
            RawResourceType::IoReadFlow,
            RawResourceType::IoWriteFlow,
        ];
        values
    }
}

impl ::std::marker::Copy for RawResourceType {
}

impl ::protobuf::PbPrint for RawResourceType {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == RawResourceType::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for RawResourceType {
    fn default() -> Self {
        RawResourceType::Cpu
    }
}

impl ::protobuf::reflect::ProtobufValue for RawResourceType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GroupMode {
    Unknown = 0,
    RuMode = 1,
    RawMode = 2,
}

impl ::protobuf::ProtobufEnum for GroupMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GroupMode> {
        match value {
            0 => ::std::option::Option::Some(GroupMode::Unknown),
            1 => ::std::option::Option::Some(GroupMode::RuMode),
            2 => ::std::option::Option::Some(GroupMode::RawMode),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GroupMode] = &[
            GroupMode::Unknown,
            GroupMode::RuMode,
            GroupMode::RawMode,
        ];
        values
    }
}

impl ::std::marker::Copy for GroupMode {
}

impl ::protobuf::PbPrint for GroupMode {
    fn fmt(&self, name: &str, buf: &mut String) {
        use std::fmt::Write;
        if *self == GroupMode::default() {
            return;
        }
        ::protobuf::push_field_start(name, buf);
        write!(buf, "{:?}", self).unwrap();
    }
}

impl ::std::default::Default for GroupMode {
    fn default() -> Self {
        GroupMode::Unknown
    }
}

impl ::protobuf::reflect::ProtobufValue for GroupMode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}
pub use super::resource_manager_grpc::*;
